// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <div
    className="container"
  >
    <TopNav
      currentCards={null}
      logo="file-stub"
      onBurgerClick={[MockFunction]}
      timerRef={[Function]}
    />
    <DrawerMenu
      isDrawerDisplayed={false}
      isGame={false}
      onCloseDrawer={[MockFunction]}
      onExitGame={[Function]}
      onResetGame={[Function]}
      toggleCardMatchCount={[MockFunction]}
      toggleSpotifyWidget={[MockFunction]}
    />
    <Content
      cardMatchCount={2}
      currentCards={null}
      fetchCards={[Function]}
      levels={Array []}
      onGameComplete={[Function]}
      onGameStart={[Function]}
      parentRef={[Function]}
    />
  </div>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <TopNav
          currentCards={null}
          logo="file-stub"
          onBurgerClick={[MockFunction]}
          timerRef={[Function]}
        />,
        <DrawerMenu
          isDrawerDisplayed={false}
          isGame={false}
          onCloseDrawer={[MockFunction]}
          onExitGame={[Function]}
          onResetGame={[Function]}
          toggleCardMatchCount={[MockFunction]}
          toggleSpotifyWidget={[MockFunction]}
        />,
        <Content
          cardMatchCount={2}
          currentCards={null}
          fetchCards={[Function]}
          levels={Array []}
          onGameComplete={[Function]}
          onGameStart={[Function]}
          parentRef={[Function]}
        />,
        false,
      ],
      "className": "container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "currentCards": null,
          "logo": "file-stub",
          "onBurgerClick": [MockFunction],
          "timerRef": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "isDrawerDisplayed": false,
          "isGame": false,
          "onCloseDrawer": [MockFunction],
          "onExitGame": [Function],
          "onResetGame": [Function],
          "toggleCardMatchCount": [MockFunction],
          "toggleSpotifyWidget": [MockFunction],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "cardMatchCount": 2,
          "currentCards": null,
          "fetchCards": [Function],
          "levels": Array [],
          "onGameComplete": [Function],
          "onGameStart": [Function],
          "parentRef": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <TopNav
            currentCards={null}
            logo="file-stub"
            onBurgerClick={[MockFunction]}
            timerRef={[Function]}
          />,
          <DrawerMenu
            isDrawerDisplayed={false}
            isGame={false}
            onCloseDrawer={[MockFunction]}
            onExitGame={[Function]}
            onResetGame={[Function]}
            toggleCardMatchCount={[MockFunction]}
            toggleSpotifyWidget={[MockFunction]}
          />,
          <Content
            cardMatchCount={2}
            currentCards={null}
            fetchCards={[Function]}
            levels={Array []}
            onGameComplete={[Function]}
            onGameStart={[Function]}
            parentRef={[Function]}
          />,
          false,
        ],
        "className": "container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "currentCards": null,
            "logo": "file-stub",
            "onBurgerClick": [MockFunction],
            "timerRef": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "isDrawerDisplayed": false,
            "isGame": false,
            "onCloseDrawer": [MockFunction],
            "onExitGame": [Function],
            "onResetGame": [Function],
            "toggleCardMatchCount": [MockFunction],
            "toggleSpotifyWidget": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "cardMatchCount": 2,
            "currentCards": null,
            "fetchCards": [Function],
            "levels": Array [],
            "onGameComplete": [Function],
            "onGameStart": [Function],
            "parentRef": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
